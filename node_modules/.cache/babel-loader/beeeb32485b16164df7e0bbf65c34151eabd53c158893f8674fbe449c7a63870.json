{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particle_engine;\nimport { Vector, Vector3d } from \"./Utils\";\nimport { alterHsl, clamp, colorToRgb, deepExtend, getDistance, getHslFromAnimation, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, isInArray, itemFromArray, randomInRange, setRangeValue } from \"../Utils\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nconst fixOutMode = data => {\n  if (isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes)) {\n    if (data.coord > data.maxCoord - data.radius * 2) {\n      data.setCb(-data.radius);\n    } else if (data.coord < data.radius * 2) {\n      data.setCb(data.radius);\n    }\n  }\n};\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    _Particle_engine.set(this, void 0);\n    __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio;\n    const mainOptions = container.actualOptions;\n    const particlesOptions = new ParticlesOptions();\n    particlesOptions.load(mainOptions.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n      const shapeOptions = new Shape();\n      shapeOptions.load(overrideOptions.shape);\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n    const zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n      sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getValue(sizeOptions) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: getRangeValue(sizeOptions.animation.count)\n    };\n    const sizeAnimation = sizeOptions.animation;\n    if (sizeAnimation.enable) {\n      this.size.status = 0;\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = 0;\n          break;\n        case \"random\":\n          this.size.value = randomInRange(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? 0 : 1;\n          break;\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = 1;\n          break;\n      }\n      this.size.velocity = ((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n    this.direction = getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    const gravityOptions = this.options.move.gravity;\n    this.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n    this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n    if (this.options.move.spin.enable) {\n      const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = this.getPosition();\n      const distance = getDistance(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : getRangeValue(this.options.move.spin.acceleration)\n      };\n    }\n    this.shadowColor = colorToRgb(this.options.shadow.color);\n    for (const updater of container.particles.updaters) {\n      if (updater.init) {\n        updater.init(this);\n      }\n    }\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius();\n    const canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n  draw(delta) {\n    const container = this.container;\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    container.canvas.drawParticle(this, delta);\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    var _a;\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n  getFillColor() {\n    var _a, _b;\n    const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n    if (color && this.roll && (this.backColor || this.roll.alter)) {\n      const backFactor = this.options.roll.mode === \"both\" ? 2 : 1,\n        backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0,\n        rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        }\n        if (this.roll.alter) {\n          return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n      }\n    }\n    return color;\n  }\n  getStrokeColor() {\n    var _a, _b;\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    if (this.unbreakable) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n    if (override) {\n      return;\n    }\n    const destroyOptions = this.options.destroy;\n    if (destroyOptions.mode === \"split\") {\n      this.split();\n    }\n  }\n  reset() {\n    if (this.opacity) {\n      this.opacity.loops = 0;\n    }\n    this.size.loops = 0;\n  }\n  split() {\n    const splitOptions = this.options.destroy.split;\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n    const rate = getRangeValue(splitOptions.rate.value);\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n  calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var _a, _b, _c, _d, _e, _f;\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n      if (pluginPos !== undefined) {\n        return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n    const canvasSize = container.canvas.size;\n    const pos = Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n    const radius = this.getRadius();\n    const outModes = this.options.move.outModes,\n      fixHorizontal = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [\"bounce\", \"bounce-horizontal\"],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: value => pos.x += value,\n          radius\n        });\n      },\n      fixVertical = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [\"bounce\", \"bounce-vertical\"],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: value => pos.y += value,\n          radius\n        });\n      };\n    fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n    fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n    fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n    fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n    return pos;\n  }\n  checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const collisionsOptions = this.options.collisions;\n    const radius = this.getRadius();\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n    const overlapOptions = collisionsOptions.overlap;\n    if (overlapOptions.enable) {\n      return false;\n    }\n    const retries = overlapOptions.retries;\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n    let overlaps = false;\n    for (const particle of this.container.particles.array) {\n      if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n    return overlaps;\n  }\n  calculateVelocity() {\n    const baseVelocity = getParticleBaseVelocity(this.direction),\n      res = baseVelocity.copy(),\n      moveOptions = this.options.move,\n      rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n      radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n      range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n    if (!moveOptions.straight) {\n      res.angle += randomInRange(setRangeValue(range.left, range.right));\n    }\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n    return res;\n  }\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n    if (shapeData) {\n      return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n  loadLife() {\n    const container = this.container;\n    const particlesOptions = this.options;\n    const lifeOptions = particlesOptions.life;\n    const life = {\n      delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n    return life;\n  }\n}\n_Particle_engine = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particle_engine","Vector","Vector3d","alterHsl","clamp","colorToRgb","deepExtend","getDistance","getHslFromAnimation","getParticleBaseVelocity","getParticleDirectionAngle","getRangeMax","getRangeMin","getRangeValue","getValue","isInArray","itemFromArray","randomInRange","setRangeValue","ParticlesOptions","Shape","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","constructor","engine","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","retina","maxDistance","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","overrideShapeType","shapeOptions","shapeData","loadShapeData","undefined","options","pathDelay","move","path","delay","zIndexValue","zIndex","initParticle","sizeOptions","size","sizeRange","enable","animation","max","min","loops","maxLoops","count","sizeAnimation","status","startValue","Math","random","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","bubble","inRange","initialVelocity","calculateVelocity","copy","moveDecay","decay","gravityOptions","gravity","acceleration","inverse","calcPosition","zLayers","initialPosition","offset","origin","needsSort","lastZIndex","z","zIndexFactor","sides","drawer","drawers","plugins","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","life","loadLife","spawning","spin","spinPos","x","y","spinCenter","canvas","width","height","pos","getPosition","distance","center","angle","spinAcceleration","shadowColor","shadow","color","updater","updaters","init","particleInit","plugin","particleCreated","isVisible","isInsideCanvas","getRadius","canvasSize","draw","delta","drawParticlePlugin","drawParticle","getMass","PI","getFillColor","roll","backColor","alter","backFactor","mode","backSum","rolled","floor","getStrokeColor","strokeColor","destroy","override","particleDestroyed","destroyOptions","split","reset","opacity","splitOptions","rate","i","addSplitParticle","tryCount","arguments","length","pluginPos","particlePosition","create","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","checkOverlap","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array","baseVelocity","res","moveOptions","rad","radOffset","range","straight","speed","lifeOptions","delayTime","duration","time","WeakMap"],"sources":["/Users/nessakodo/coding/kodo/nessakodo.github.io/node_modules/tsparticles/esm/Core/Particle.js"],"sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particle_engine;\nimport { Vector, Vector3d } from \"./Utils\";\nimport { alterHsl, clamp, colorToRgb, deepExtend, getDistance, getHslFromAnimation, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, isInArray, itemFromArray, randomInRange, setRangeValue, } from \"../Utils\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nconst fixOutMode = (data) => {\n    if (isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes)) {\n        if (data.coord > data.maxCoord - data.radius * 2) {\n            data.setCb(-data.radius);\n        }\n        else if (data.coord < data.radius * 2) {\n            data.setCb(data.radius);\n        }\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        _Particle_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio;\n        const mainOptions = container.actualOptions;\n        const particlesOptions = new ParticlesOptions();\n        particlesOptions.load(mainOptions.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getValue(sizeOptions) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = 0;\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = 0;\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = Math.random() >= 0.5 ? 0 : 1;\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = 1;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        const gravityOptions = this.options.move.gravity;\n        this.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        if (this.options.move.spin.enable) {\n            const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = this.getPosition();\n            const distance = getDistance(pos, spinCenter);\n            this.spin = {\n                center: spinCenter,\n                direction: this.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: this.velocity.angle,\n                radius: distance,\n                acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : getRangeValue(this.options.move.spin.acceleration),\n            };\n        }\n        this.shadowColor = colorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            if (updater.init) {\n                updater.init(this);\n            }\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius();\n        const canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getFillColor() {\n        var _a, _b;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const backFactor = this.options.roll.mode === \"both\" ? 2 : 1, backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0, rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === \"split\") {\n            this.split();\n        }\n    }\n    reset() {\n        if (this.opacity) {\n            this.opacity.loops = 0;\n        }\n        this.size.loops = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d, _e, _f;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const radius = this.getRadius();\n        const outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n        fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n        fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n        fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions;\n        const radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move, rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\n_Particle_engine = new WeakMap();\n"],"mappings":"AAAA,IAAIA,sBAAsB,GAAI,IAAI,IAAI,IAAI,CAACA,sBAAsB,IAAK,UAAUC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,CAAC,EAAE;EAC7G,IAAID,IAAI,KAAK,GAAG,EAAE,MAAM,IAAIE,SAAS,CAAC,gCAAgC,CAAC;EACvE,IAAIF,IAAI,KAAK,GAAG,IAAI,CAACC,CAAC,EAAE,MAAM,IAAIC,SAAS,CAAC,+CAA+C,CAAC;EAC5F,IAAI,OAAOJ,KAAK,KAAK,UAAU,GAAGD,QAAQ,KAAKC,KAAK,IAAI,CAACG,CAAC,GAAG,CAACH,KAAK,CAACK,GAAG,CAACN,QAAQ,CAAC,EAAE,MAAM,IAAIK,SAAS,CAAC,yEAAyE,CAAC;EACjL,OAAQF,IAAI,KAAK,GAAG,GAAGC,CAAC,CAACG,IAAI,CAACP,QAAQ,EAAEE,KAAK,CAAC,GAAGE,CAAC,GAAGA,CAAC,CAACF,KAAK,GAAGA,KAAK,GAAGD,KAAK,CAACO,GAAG,CAACR,QAAQ,EAAEE,KAAK,CAAC,EAAGA,KAAK;AAC7G,CAAC;AACD,IAAIO,sBAAsB,GAAI,IAAI,IAAI,IAAI,CAACA,sBAAsB,IAAK,UAAUT,QAAQ,EAAEC,KAAK,EAAEE,IAAI,EAAEC,CAAC,EAAE;EACtG,IAAID,IAAI,KAAK,GAAG,IAAI,CAACC,CAAC,EAAE,MAAM,IAAIC,SAAS,CAAC,+CAA+C,CAAC;EAC5F,IAAI,OAAOJ,KAAK,KAAK,UAAU,GAAGD,QAAQ,KAAKC,KAAK,IAAI,CAACG,CAAC,GAAG,CAACH,KAAK,CAACK,GAAG,CAACN,QAAQ,CAAC,EAAE,MAAM,IAAIK,SAAS,CAAC,0EAA0E,CAAC;EAClL,OAAOF,IAAI,KAAK,GAAG,GAAGC,CAAC,GAAGD,IAAI,KAAK,GAAG,GAAGC,CAAC,CAACG,IAAI,CAACP,QAAQ,CAAC,GAAGI,CAAC,GAAGA,CAAC,CAACF,KAAK,GAAGD,KAAK,CAACS,GAAG,CAACV,QAAQ,CAAC;AACjG,CAAC;AACD,IAAIW,gBAAgB;AACpB,SAASC,MAAM,EAAEC,QAAQ,QAAQ,SAAS;AAC1C,SAASC,QAAQ,EAAEC,KAAK,EAAEC,UAAU,EAAEC,UAAU,EAAEC,WAAW,EAAEC,mBAAmB,EAAEC,uBAAuB,EAAEC,yBAAyB,EAAEC,WAAW,EAAEC,WAAW,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,aAAa,EAAEC,aAAa,EAAEC,aAAa,QAAS,UAAU;AACpQ,SAASC,gBAAgB,QAAQ,+CAA+C;AAChF,SAASC,KAAK,QAAQ,0CAA0C;AAChE,MAAMC,UAAU,GAAIC,IAAI,IAAK;EACzB,IAAIP,SAAS,CAACO,IAAI,CAACC,OAAO,EAAED,IAAI,CAACE,UAAU,CAAC,IAAIT,SAAS,CAACO,IAAI,CAACC,OAAO,EAAED,IAAI,CAACE,UAAU,CAAC,EAAE;IACtF,IAAIF,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACI,QAAQ,GAAGJ,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;MAC9CL,IAAI,CAACM,KAAK,CAAC,CAACN,IAAI,CAACK,MAAM,CAAC;IAC5B,CAAC,MACI,IAAIL,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;MACnCL,IAAI,CAACM,KAAK,CAACN,IAAI,CAACK,MAAM,CAAC;IAC3B;EACJ;AACJ,CAAC;AACD,OAAO,MAAME,QAAQ,CAAC;EAClBC,WAAWA,CAACC,MAAM,EAAEC,EAAE,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,KAAK,EAAE;IACjE,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IACtC,IAAI,CAACb,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACG,KAAK,GAAGA,KAAK;IAClBpC,gBAAgB,CAACH,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAClCT,sBAAsB,CAAC,IAAI,EAAEY,gBAAgB,EAAE+B,MAAM,EAAE,GAAG,CAAC;IAC3D,IAAI,CAACe,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,MAAM,GAAG;MACVC,WAAW,EAAE,CAAC;IAClB,CAAC;IACD,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B,MAAMC,OAAO,GAAGvB,SAAS,CAACoB,MAAM,CAACI,UAAU;IAC3C,MAAMC,WAAW,GAAGzB,SAAS,CAAC0B,aAAa;IAC3C,MAAMC,gBAAgB,GAAG,IAAIzC,gBAAgB,CAAC,CAAC;IAC/CyC,gBAAgB,CAACC,IAAI,CAACH,WAAW,CAACI,SAAS,CAAC;IAC5C,MAAMC,SAAS,GAAGH,gBAAgB,CAACI,KAAK,CAACC,IAAI;IAC7C,MAAMC,gBAAgB,GAAGN,gBAAgB,CAACM,gBAAgB;IAC1D,IAAI,CAACF,KAAK,GAAGD,SAAS,YAAYI,KAAK,GAAGnD,aAAa,CAAC+C,SAAS,EAAE,IAAI,CAAC/B,EAAE,EAAEkC,gBAAgB,CAAC,GAAGH,SAAS;IACzG,IAAI5B,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAAC6B,KAAK,EAAE;MACzF,IAAI7B,eAAe,CAAC6B,KAAK,CAACC,IAAI,EAAE;QAC5B,MAAMG,iBAAiB,GAAGjC,eAAe,CAAC6B,KAAK,CAACC,IAAI;QACpD,IAAI,CAACD,KAAK,GACNI,iBAAiB,YAAYD,KAAK,GAC5BnD,aAAa,CAACoD,iBAAiB,EAAE,IAAI,CAACpC,EAAE,EAAEkC,gBAAgB,CAAC,GAC3DE,iBAAiB;MAC/B;MACA,MAAMC,YAAY,GAAG,IAAIjD,KAAK,CAAC,CAAC;MAChCiD,YAAY,CAACR,IAAI,CAAC1B,eAAe,CAAC6B,KAAK,CAAC;MACxC,IAAI,IAAI,CAACA,KAAK,EAAE;QACZ,IAAI,CAACM,SAAS,GAAG,IAAI,CAACC,aAAa,CAACF,YAAY,EAAEH,gBAAgB,CAAC;MACvE;IACJ,CAAC,MACI;MACD,IAAI,CAACI,SAAS,GAAG,IAAI,CAACC,aAAa,CAACX,gBAAgB,CAACI,KAAK,EAAEE,gBAAgB,CAAC;IACjF;IACA,IAAI/B,eAAe,KAAKqC,SAAS,EAAE;MAC/BZ,gBAAgB,CAACC,IAAI,CAAC1B,eAAe,CAAC;IAC1C;IACA,IAAI,CAAC,CAACE,EAAE,GAAG,IAAI,CAACiC,SAAS,MAAM,IAAI,IAAIjC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACyB,SAAS,MAAMU,SAAS,EAAE;MACzFZ,gBAAgB,CAACC,IAAI,CAAC,CAACvB,EAAE,GAAG,IAAI,CAACgC,SAAS,MAAM,IAAI,IAAIhC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACwB,SAAS,CAAC;IAClG;IACA,IAAI,CAAChB,IAAI,GAAG,CAACN,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAAC+B,SAAS,MAAM,IAAI,IAAI/B,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACO,IAAI,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAACM,IAAI;IAChI,IAAI,CAACC,KAAK,GAAG,CAACL,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAAC6B,SAAS,MAAM,IAAI,IAAI7B,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACM,KAAK,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAACK,KAAK;IACnI,IAAI,CAAC0B,OAAO,GAAGb,gBAAgB;IAC/B,IAAI,CAACc,SAAS,GAAG5D,QAAQ,CAAC,IAAI,CAAC2D,OAAO,CAACE,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC,GAAG,IAAI;IAC9D,MAAMC,WAAW,GAAGjE,aAAa,CAAC,IAAI,CAAC4D,OAAO,CAACM,MAAM,CAACxF,KAAK,CAAC;IAC5D0C,SAAS,CAACoB,MAAM,CAAC2B,YAAY,CAAC,IAAI,CAAC;IACnC,MAAMC,WAAW,GAAG,IAAI,CAACR,OAAO,CAACS,IAAI;MAAEC,SAAS,GAAGF,WAAW,CAAC1F,KAAK;IACpE,IAAI,CAAC2F,IAAI,GAAG;MACRE,MAAM,EAAEH,WAAW,CAACI,SAAS,CAACD,MAAM;MACpC7F,KAAK,EAAEuB,QAAQ,CAACmE,WAAW,CAAC,GAAGhD,SAAS,CAACoB,MAAM,CAACI,UAAU;MAC1D6B,GAAG,EAAE3E,WAAW,CAACwE,SAAS,CAAC,GAAG3B,OAAO;MACrC+B,GAAG,EAAE3E,WAAW,CAACuE,SAAS,CAAC,GAAG3B,OAAO;MACrCgC,KAAK,EAAE,CAAC;MACRC,QAAQ,EAAE5E,aAAa,CAACoE,WAAW,CAACI,SAAS,CAACK,KAAK;IACvD,CAAC;IACD,MAAMC,aAAa,GAAGV,WAAW,CAACI,SAAS;IAC3C,IAAIM,aAAa,CAACP,MAAM,EAAE;MACtB,IAAI,CAACF,IAAI,CAACU,MAAM,GAAG,CAAC;MACpB,QAAQD,aAAa,CAACE,UAAU;QAC5B,KAAK,KAAK;UACN,IAAI,CAACX,IAAI,CAAC3F,KAAK,GAAG,IAAI,CAAC2F,IAAI,CAACK,GAAG;UAC/B,IAAI,CAACL,IAAI,CAACU,MAAM,GAAG,CAAC;UACpB;QACJ,KAAK,QAAQ;UACT,IAAI,CAACV,IAAI,CAAC3F,KAAK,GAAG0B,aAAa,CAAC,IAAI,CAACiE,IAAI,CAAC,GAAG1B,OAAO;UACpD,IAAI,CAAC0B,IAAI,CAACU,MAAM,GAAGE,IAAI,CAACC,MAAM,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC;UAC/C;QACJ,KAAK,KAAK;QACV;UACI,IAAI,CAACb,IAAI,CAAC3F,KAAK,GAAG,IAAI,CAAC2F,IAAI,CAACI,GAAG;UAC/B,IAAI,CAACJ,IAAI,CAACU,MAAM,GAAG,CAAC;UACpB;MACR;MACA,IAAI,CAACV,IAAI,CAACc,QAAQ,GACb,CAAC,CAACrD,EAAE,GAAG,IAAI,CAACU,MAAM,CAAC4C,kBAAkB,MAAM,IAAI,IAAItD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGV,SAAS,CAACoB,MAAM,CAAC4C,kBAAkB,IAAI,GAAG,GAC/GhE,SAAS,CAACoB,MAAM,CAAC6C,YAAY;MACrC,IAAI,CAACP,aAAa,CAACQ,IAAI,EAAE;QACrB,IAAI,CAACjB,IAAI,CAACc,QAAQ,IAAIF,IAAI,CAACC,MAAM,CAAC,CAAC;MACvC;IACJ;IACA,IAAI,CAACK,SAAS,GAAG1F,yBAAyB,CAAC,IAAI,CAAC+D,OAAO,CAACE,IAAI,CAACyB,SAAS,CAAC;IACvE,IAAI,CAACC,MAAM,GAAG;MACVC,OAAO,EAAE;IACb,CAAC;IACD,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAC/C,IAAI,CAACR,QAAQ,GAAG,IAAI,CAACO,eAAe,CAACE,IAAI,CAAC,CAAC;IAC3C,IAAI,CAACC,SAAS,GAAG,CAAC,GAAG7F,aAAa,CAAC,IAAI,CAAC4D,OAAO,CAACE,IAAI,CAACgC,KAAK,CAAC;IAC3D,MAAMC,cAAc,GAAG,IAAI,CAACnC,OAAO,CAACE,IAAI,CAACkC,OAAO;IAChD,IAAI,CAACA,OAAO,GAAG;MACXzB,MAAM,EAAEwB,cAAc,CAACxB,MAAM;MAC7B0B,YAAY,EAAEjG,aAAa,CAAC+F,cAAc,CAACE,YAAY,CAAC;MACxDC,OAAO,EAAEH,cAAc,CAACG;IAC5B,CAAC;IACD,IAAI,CAAC7E,QAAQ,GAAG,IAAI,CAAC8E,YAAY,CAAC/E,SAAS,EAAEC,QAAQ,EAAE9B,KAAK,CAAC0E,WAAW,EAAE,CAAC,EAAE7C,SAAS,CAACgF,OAAO,CAAC,CAAC;IAChG,IAAI,CAACC,eAAe,GAAG,IAAI,CAAChF,QAAQ,CAACuE,IAAI,CAAC,CAAC;IAC3C,IAAI,CAACU,MAAM,GAAGlH,MAAM,CAACmH,MAAM;IAC3B,MAAMtD,SAAS,GAAG7B,SAAS,CAAC6B,SAAS;IACrCA,SAAS,CAACuD,SAAS,GAAGvD,SAAS,CAACuD,SAAS,IAAIvD,SAAS,CAACwD,UAAU,GAAG,IAAI,CAACpF,QAAQ,CAACqF,CAAC;IACnFzD,SAAS,CAACwD,UAAU,GAAG,IAAI,CAACpF,QAAQ,CAACqF,CAAC;IACtC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACtF,QAAQ,CAACqF,CAAC,GAAGtF,SAAS,CAACgF,OAAO;IACvD,IAAI,CAACQ,KAAK,GAAG,EAAE;IACf,IAAIC,MAAM,GAAGzF,SAAS,CAAC0F,OAAO,CAAC5H,GAAG,CAAC,IAAI,CAACiE,KAAK,CAAC;IAC9C,IAAI,CAAC0D,MAAM,EAAE;MACTA,MAAM,GAAG5H,sBAAsB,CAAC,IAAI,EAAEE,gBAAgB,EAAE,GAAG,CAAC,CAAC4H,OAAO,CAACC,cAAc,CAAC,IAAI,CAAC7D,KAAK,CAAC;MAC/F,IAAI0D,MAAM,EAAE;QACRzF,SAAS,CAAC0F,OAAO,CAAC9H,GAAG,CAAC,IAAI,CAACmE,KAAK,EAAE0D,MAAM,CAAC;MAC7C;IACJ;IACA,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACI,SAAS,EAAE;MAClEJ,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACI,SAAS,CAAC,IAAI,CAAC;IAC1E;IACA,MAAMC,aAAa,GAAGL,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACM,aAAa;IAC1F,IAAID,aAAa,EAAE;MACf,IAAI,CAACN,KAAK,GAAGM,aAAa,CAAC,IAAI,CAAC;IACpC;IACA,IAAI,CAACE,IAAI,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;IAC3B,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACF,IAAI,CAACpD,KAAK,GAAG,CAAC;IACnC,IAAI,IAAI,CAACJ,OAAO,CAACE,IAAI,CAACyD,IAAI,CAAChD,MAAM,EAAE;MAC/B,MAAMiD,OAAO,GAAG,CAACzF,EAAE,GAAG,IAAI,CAAC6B,OAAO,CAACE,IAAI,CAACyD,IAAI,CAAClG,QAAQ,MAAM,IAAI,IAAIU,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;QAAE0F,CAAC,EAAE,EAAE;QAAEC,CAAC,EAAE;MAAG,CAAC;MACxG,MAAMC,UAAU,GAAG;QACfF,CAAC,EAAGD,OAAO,CAACC,CAAC,GAAG,GAAG,GAAIrG,SAAS,CAACwG,MAAM,CAACvD,IAAI,CAACwD,KAAK;QAClDH,CAAC,EAAGF,OAAO,CAACE,CAAC,GAAG,GAAG,GAAItG,SAAS,CAACwG,MAAM,CAACvD,IAAI,CAACyD;MACjD,CAAC;MACD,MAAMC,GAAG,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;MAC9B,MAAMC,QAAQ,GAAGvI,WAAW,CAACqI,GAAG,EAAEJ,UAAU,CAAC;MAC7C,IAAI,CAACJ,IAAI,GAAG;QACRW,MAAM,EAAEP,UAAU;QAClBpC,SAAS,EAAE,IAAI,CAACJ,QAAQ,CAACsC,CAAC,IAAI,CAAC,GAAG,WAAW,GAAG,mBAAmB;QACnEU,KAAK,EAAE,IAAI,CAAChD,QAAQ,CAACgD,KAAK;QAC1BrH,MAAM,EAAEmH,QAAQ;QAChBhC,YAAY,EAAE,CAACjE,EAAE,GAAG,IAAI,CAACQ,MAAM,CAAC4F,gBAAgB,MAAM,IAAI,IAAIpG,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGhC,aAAa,CAAC,IAAI,CAAC4D,OAAO,CAACE,IAAI,CAACyD,IAAI,CAACtB,YAAY;MACxI,CAAC;IACL;IACA,IAAI,CAACoC,WAAW,GAAG7I,UAAU,CAAC,IAAI,CAACoE,OAAO,CAAC0E,MAAM,CAACC,KAAK,CAAC;IACxD,KAAK,MAAMC,OAAO,IAAIpH,SAAS,CAAC6B,SAAS,CAACwF,QAAQ,EAAE;MAChD,IAAID,OAAO,CAACE,IAAI,EAAE;QACdF,OAAO,CAACE,IAAI,CAAC,IAAI,CAAC;MACtB;IACJ;IACA,IAAI7B,MAAM,IAAIA,MAAM,CAAC8B,YAAY,EAAE;MAC/B9B,MAAM,CAAC8B,YAAY,CAACvH,SAAS,EAAE,IAAI,CAAC;IACxC;IACA,KAAK,MAAM,GAAGwH,MAAM,CAAC,IAAIxH,SAAS,CAAC2F,OAAO,EAAE;MACxC,IAAI6B,MAAM,CAACC,eAAe,EAAE;QACxBD,MAAM,CAACC,eAAe,CAAC,IAAI,CAAC;MAChC;IACJ;EACJ;EACAC,SAASA,CAAA,EAAG;IACR,OAAO,CAAC,IAAI,CAAC1G,SAAS,IAAI,CAAC,IAAI,CAACkF,QAAQ,IAAI,IAAI,CAACyB,cAAc,CAAC,CAAC;EACrE;EACAA,cAAcA,CAAA,EAAG;IACb,MAAMjI,MAAM,GAAG,IAAI,CAACkI,SAAS,CAAC,CAAC;IAC/B,MAAMC,UAAU,GAAG,IAAI,CAAC7H,SAAS,CAACwG,MAAM,CAACvD,IAAI;IAC7C,OAAQ,IAAI,CAAChD,QAAQ,CAACoG,CAAC,IAAI,CAAC3G,MAAM,IAC9B,IAAI,CAACO,QAAQ,CAACqG,CAAC,IAAI,CAAC5G,MAAM,IAC1B,IAAI,CAACO,QAAQ,CAACqG,CAAC,IAAIuB,UAAU,CAACnB,MAAM,GAAGhH,MAAM,IAC7C,IAAI,CAACO,QAAQ,CAACoG,CAAC,IAAIwB,UAAU,CAACpB,KAAK,GAAG/G,MAAM;EACpD;EACAoI,IAAIA,CAACC,KAAK,EAAE;IACR,MAAM/H,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,KAAK,MAAM,GAAGwH,MAAM,CAAC,IAAIxH,SAAS,CAAC2F,OAAO,EAAE;MACxC3F,SAAS,CAACwG,MAAM,CAACwB,kBAAkB,CAACR,MAAM,EAAE,IAAI,EAAEO,KAAK,CAAC;IAC5D;IACA/H,SAAS,CAACwG,MAAM,CAACyB,YAAY,CAAC,IAAI,EAAEF,KAAK,CAAC;EAC9C;EACAnB,WAAWA,CAAA,EAAG;IACV,OAAO;MACHP,CAAC,EAAE,IAAI,CAACpG,QAAQ,CAACoG,CAAC,GAAG,IAAI,CAACnB,MAAM,CAACmB,CAAC;MAClCC,CAAC,EAAE,IAAI,CAACrG,QAAQ,CAACqG,CAAC,GAAG,IAAI,CAACpB,MAAM,CAACoB,CAAC;MAClChB,CAAC,EAAE,IAAI,CAACrF,QAAQ,CAACqF;IACrB,CAAC;EACL;EACAsC,SAASA,CAAA,EAAG;IACR,IAAIxH,EAAE;IACN,OAAO,CAACA,EAAE,GAAG,IAAI,CAACgE,MAAM,CAAC1E,MAAM,MAAM,IAAI,IAAIU,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAAC6C,IAAI,CAAC3F,KAAK;EACrF;EACA4K,OAAOA,CAAA,EAAG;IACN,OAAQ,IAAI,CAACN,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG/D,IAAI,CAACsE,EAAE,GAAI,CAAC;EAChD;EACAC,YAAYA,CAAA,EAAG;IACX,IAAIhI,EAAE,EAAEC,EAAE;IACV,MAAM8G,KAAK,GAAG,CAAC/G,EAAE,GAAG,IAAI,CAACgE,MAAM,CAAC+C,KAAK,MAAM,IAAI,IAAI/G,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG7B,mBAAmB,CAAC,IAAI,CAAC4I,KAAK,CAAC;IACvG,IAAIA,KAAK,IAAI,IAAI,CAACkB,IAAI,KAAK,IAAI,CAACC,SAAS,IAAI,IAAI,CAACD,IAAI,CAACE,KAAK,CAAC,EAAE;MAC3D,MAAMC,UAAU,GAAG,IAAI,CAAChG,OAAO,CAAC6F,IAAI,CAACI,IAAI,KAAK,MAAM,GAAG,CAAC,GAAG,CAAC;QAAEC,OAAO,GAAG,IAAI,CAAClG,OAAO,CAAC6F,IAAI,CAACI,IAAI,KAAK,YAAY,GAAG5E,IAAI,CAACsE,EAAE,GAAG,CAAC,GAAG,CAAC;QAAEQ,MAAM,GAAG9E,IAAI,CAAC+E,KAAK,CAAC,CAAC,CAAC,CAACvI,EAAE,GAAG,IAAI,CAACgI,IAAI,CAACtB,KAAK,MAAM,IAAI,IAAI1G,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,IAAIqI,OAAO,KAAK7E,IAAI,CAACsE,EAAE,GAAGK,UAAU,CAAC,CAAC,GAAG,CAAC;MAC5P,IAAIG,MAAM,EAAE;QACR,IAAI,IAAI,CAACL,SAAS,EAAE;UAChB,OAAO,IAAI,CAACA,SAAS;QACzB;QACA,IAAI,IAAI,CAACD,IAAI,CAACE,KAAK,EAAE;UACjB,OAAOrK,QAAQ,CAACiJ,KAAK,EAAE,IAAI,CAACkB,IAAI,CAACE,KAAK,CAACvG,IAAI,EAAE,IAAI,CAACqG,IAAI,CAACE,KAAK,CAACjL,KAAK,CAAC;QACvE;MACJ;IACJ;IACA,OAAO6J,KAAK;EAChB;EACA0B,cAAcA,CAAA,EAAG;IACb,IAAIzI,EAAE,EAAEC,EAAE;IACV,OAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACgE,MAAM,CAAC+C,KAAK,MAAM,IAAI,IAAI/G,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG7B,mBAAmB,CAAC,IAAI,CAACuK,WAAW,CAAC,MAAM,IAAI,IAAIzI,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAAC+H,YAAY,CAAC,CAAC;EACtK;EACAW,OAAOA,CAACC,QAAQ,EAAE;IACd,IAAI,CAAChI,SAAS,GAAG,IAAI;IACrB,IAAI,CAACoD,MAAM,CAACC,OAAO,GAAG,KAAK;IAC3B,IAAI,IAAI,CAACpD,WAAW,EAAE;MAClB;IACJ;IACA,IAAI,CAACD,SAAS,GAAG,IAAI;IACrB,IAAI,CAACoD,MAAM,CAACC,OAAO,GAAG,KAAK;IAC3B,KAAK,MAAM,GAAGmD,MAAM,CAAC,IAAI,IAAI,CAACxH,SAAS,CAAC2F,OAAO,EAAE;MAC7C,IAAI6B,MAAM,CAACyB,iBAAiB,EAAE;QAC1BzB,MAAM,CAACyB,iBAAiB,CAAC,IAAI,EAAED,QAAQ,CAAC;MAC5C;IACJ;IACA,IAAIA,QAAQ,EAAE;MACV;IACJ;IACA,MAAME,cAAc,GAAG,IAAI,CAAC1G,OAAO,CAACuG,OAAO;IAC3C,IAAIG,cAAc,CAACT,IAAI,KAAK,OAAO,EAAE;MACjC,IAAI,CAACU,KAAK,CAAC,CAAC;IAChB;EACJ;EACAC,KAAKA,CAAA,EAAG;IACJ,IAAI,IAAI,CAACC,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAAC9F,KAAK,GAAG,CAAC;IAC1B;IACA,IAAI,CAACN,IAAI,CAACM,KAAK,GAAG,CAAC;EACvB;EACA4F,KAAKA,CAAA,EAAG;IACJ,MAAMG,YAAY,GAAG,IAAI,CAAC9G,OAAO,CAACuG,OAAO,CAACI,KAAK;IAC/C,IAAIG,YAAY,CAAC7F,KAAK,IAAI,CAAC,IAAI,IAAI,CAACvC,UAAU,EAAE,GAAGoI,YAAY,CAAC7F,KAAK,EAAE;MACnE;IACJ;IACA,MAAM8F,IAAI,GAAG3K,aAAa,CAAC0K,YAAY,CAACC,IAAI,CAACjM,KAAK,CAAC;IACnD,KAAK,IAAIkM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,EAAEC,CAAC,EAAE,EAAE;MAC3B,IAAI,CAACxJ,SAAS,CAAC6B,SAAS,CAAC4H,gBAAgB,CAAC,IAAI,CAAC;IACnD;EACJ;EACA1E,YAAYA,CAAC/E,SAAS,EAAEC,QAAQ,EAAE6C,MAAM,EAAgB;IAAA,IAAd4G,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAApH,SAAA,GAAAoH,SAAA,MAAG,CAAC;IAClD,IAAIvJ,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IAC1B,KAAK,MAAM,GAAG+G,MAAM,CAAC,IAAIxH,SAAS,CAAC2F,OAAO,EAAE;MACxC,MAAMkE,SAAS,GAAGrC,MAAM,CAACsC,gBAAgB,KAAKvH,SAAS,GAAGiF,MAAM,CAACsC,gBAAgB,CAAC7J,QAAQ,EAAE,IAAI,CAAC,GAAGsC,SAAS;MAC7G,IAAIsH,SAAS,KAAKtH,SAAS,EAAE;QACzB,OAAOtE,QAAQ,CAAC8L,MAAM,CAACF,SAAS,CAACxD,CAAC,EAAEwD,SAAS,CAACvD,CAAC,EAAExD,MAAM,CAAC;MAC5D;IACJ;IACA,MAAM+E,UAAU,GAAG7H,SAAS,CAACwG,MAAM,CAACvD,IAAI;IACxC,MAAM0D,GAAG,GAAG1I,QAAQ,CAAC8L,MAAM,CAAC,CAAC3J,EAAE,GAAGH,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACoG,CAAC,MAAM,IAAI,IAAIjG,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGyD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG+D,UAAU,CAACpB,KAAK,EAAE,CAACpG,EAAE,GAAGJ,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACqG,CAAC,MAAM,IAAI,IAAIjG,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGwD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG+D,UAAU,CAACnB,MAAM,EAAE5D,MAAM,CAAC;IACtT,MAAMpD,MAAM,GAAG,IAAI,CAACkI,SAAS,CAAC,CAAC;IAC/B,MAAMoC,QAAQ,GAAG,IAAI,CAACxH,OAAO,CAACE,IAAI,CAACsH,QAAQ;MAAEC,aAAa,GAAI3K,OAAO,IAAK;QACtEF,UAAU,CAAC;UACPE,OAAO;UACPC,UAAU,EAAE,CAAC,QAAQ,EAAE,mBAAmB,CAAC;UAC3CC,KAAK,EAAEmH,GAAG,CAACN,CAAC;UACZ5G,QAAQ,EAAEO,SAAS,CAACwG,MAAM,CAACvD,IAAI,CAACwD,KAAK;UACrC9G,KAAK,EAAGrC,KAAK,IAAMqJ,GAAG,CAACN,CAAC,IAAI/I,KAAM;UAClCoC;QACJ,CAAC,CAAC;MACN,CAAC;MAAEwK,WAAW,GAAI5K,OAAO,IAAK;QAC1BF,UAAU,CAAC;UACPE,OAAO;UACPC,UAAU,EAAE,CAAC,QAAQ,EAAE,iBAAiB,CAAC;UACzCC,KAAK,EAAEmH,GAAG,CAACL,CAAC;UACZ7G,QAAQ,EAAEO,SAAS,CAACwG,MAAM,CAACvD,IAAI,CAACyD,MAAM;UACtC/G,KAAK,EAAGrC,KAAK,IAAMqJ,GAAG,CAACL,CAAC,IAAIhJ,KAAM;UAClCoC;QACJ,CAAC,CAAC;MACN,CAAC;IACDuK,aAAa,CAAC,CAAC3J,EAAE,GAAG0J,QAAQ,CAACG,IAAI,MAAM,IAAI,IAAI7J,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG0J,QAAQ,CAACI,OAAO,CAAC;IACrFH,aAAa,CAAC,CAAC1J,EAAE,GAAGyJ,QAAQ,CAACK,KAAK,MAAM,IAAI,IAAI9J,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGyJ,QAAQ,CAACI,OAAO,CAAC;IACtFF,WAAW,CAAC,CAAC1J,EAAE,GAAGwJ,QAAQ,CAACM,GAAG,MAAM,IAAI,IAAI9J,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGwJ,QAAQ,CAACI,OAAO,CAAC;IAClFF,WAAW,CAAC,CAACzJ,EAAE,GAAGuJ,QAAQ,CAACO,MAAM,MAAM,IAAI,IAAI9J,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGuJ,QAAQ,CAACI,OAAO,CAAC;IACrF,IAAI,IAAI,CAACI,YAAY,CAAC7D,GAAG,EAAE+C,QAAQ,CAAC,EAAE;MAClC,OAAO,IAAI,CAAC3E,YAAY,CAAC/E,SAAS,EAAEuC,SAAS,EAAEO,MAAM,EAAE4G,QAAQ,GAAG,CAAC,CAAC;IACxE;IACA,OAAO/C,GAAG;EACd;EACA6D,YAAYA,CAAC7D,GAAG,EAAgB;IAAA,IAAd+C,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAApH,SAAA,GAAAoH,SAAA,MAAG,CAAC;IAC1B,MAAMc,iBAAiB,GAAG,IAAI,CAACjI,OAAO,CAACkI,UAAU;IACjD,MAAMhL,MAAM,GAAG,IAAI,CAACkI,SAAS,CAAC,CAAC;IAC/B,IAAI,CAAC6C,iBAAiB,CAACtH,MAAM,EAAE;MAC3B,OAAO,KAAK;IAChB;IACA,MAAMwH,cAAc,GAAGF,iBAAiB,CAACG,OAAO;IAChD,IAAID,cAAc,CAACxH,MAAM,EAAE;MACvB,OAAO,KAAK;IAChB;IACA,MAAM0H,OAAO,GAAGF,cAAc,CAACE,OAAO;IACtC,IAAIA,OAAO,IAAI,CAAC,IAAInB,QAAQ,GAAGmB,OAAO,EAAE;MACpC,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;IAClE;IACA,IAAIC,QAAQ,GAAG,KAAK;IACpB,KAAK,MAAMC,QAAQ,IAAI,IAAI,CAAChL,SAAS,CAAC6B,SAAS,CAACoJ,KAAK,EAAE;MACnD,IAAI3M,WAAW,CAACqI,GAAG,EAAEqE,QAAQ,CAAC/K,QAAQ,CAAC,GAAGP,MAAM,GAAGsL,QAAQ,CAACpD,SAAS,CAAC,CAAC,EAAE;QACrEmD,QAAQ,GAAG,IAAI;QACf;MACJ;IACJ;IACA,OAAOA,QAAQ;EACnB;EACAxG,iBAAiBA,CAAA,EAAG;IAChB,MAAM2G,YAAY,GAAG1M,uBAAuB,CAAC,IAAI,CAAC2F,SAAS,CAAC;MAAEgH,GAAG,GAAGD,YAAY,CAAC1G,IAAI,CAAC,CAAC;MAAE4G,WAAW,GAAG,IAAI,CAAC5I,OAAO,CAACE,IAAI;MAAE2I,GAAG,GAAIxH,IAAI,CAACsE,EAAE,GAAG,GAAG,GAAIvJ,aAAa,CAACwM,WAAW,CAACrE,KAAK,CAACzJ,KAAK,CAAC;MAAEgO,SAAS,GAAIzH,IAAI,CAACsE,EAAE,GAAG,GAAG,GAAIvJ,aAAa,CAACwM,WAAW,CAACrE,KAAK,CAAC7B,MAAM,CAAC;MAAEqG,KAAK,GAAG;QACrQpB,IAAI,EAAEmB,SAAS,GAAGD,GAAG,GAAG,CAAC;QACzBhB,KAAK,EAAEiB,SAAS,GAAGD,GAAG,GAAG;MAC7B,CAAC;IACD,IAAI,CAACD,WAAW,CAACI,QAAQ,EAAE;MACvBL,GAAG,CAACpE,KAAK,IAAI/H,aAAa,CAACC,aAAa,CAACsM,KAAK,CAACpB,IAAI,EAAEoB,KAAK,CAAClB,KAAK,CAAC,CAAC;IACtE;IACA,IAAIe,WAAW,CAACtH,MAAM,IAAI,OAAOsH,WAAW,CAACK,KAAK,KAAK,QAAQ,EAAE;MAC7DN,GAAG,CAACvB,MAAM,IAAI/F,IAAI,CAACC,MAAM,CAAC,CAAC;IAC/B;IACA,OAAOqH,GAAG;EACd;EACA7I,aAAaA,CAACF,YAAY,EAAEH,gBAAgB,EAAE;IAC1C,MAAMI,SAAS,GAAGD,YAAY,CAACI,OAAO,CAAC,IAAI,CAACT,KAAK,CAAC;IAClD,IAAIM,SAAS,EAAE;MACX,OAAOhE,UAAU,CAAC,CAAC,CAAC,EAAEgE,SAAS,YAAYH,KAAK,GAAGnD,aAAa,CAACsD,SAAS,EAAE,IAAI,CAACtC,EAAE,EAAEkC,gBAAgB,CAAC,GAAGI,SAAS,CAAC;IACvH;EACJ;EACA4D,QAAQA,CAAA,EAAG;IACP,MAAMjG,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,MAAM2B,gBAAgB,GAAG,IAAI,CAACa,OAAO;IACrC,MAAMkJ,WAAW,GAAG/J,gBAAgB,CAACqE,IAAI;IACzC,MAAMA,IAAI,GAAG;MACTpD,KAAK,EAAE5C,SAAS,CAACoB,MAAM,CAAC6C,YAAY,GAC5BrF,aAAa,CAAC8M,WAAW,CAAC9I,KAAK,CAACtF,KAAK,CAAC,IAAIoO,WAAW,CAAC9I,KAAK,CAACsB,IAAI,GAAG,CAAC,GAAGL,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,GACrF9D,SAAS,CAACoB,MAAM,CAAC6C,YAAY,GAC7B,IAAI,GACN,CAAC;MACP0H,SAAS,EAAE,CAAC;MACZC,QAAQ,EAAE5L,SAAS,CAACoB,MAAM,CAAC6C,YAAY,GAC/BrF,aAAa,CAAC8M,WAAW,CAACE,QAAQ,CAACtO,KAAK,CAAC,IAAIoO,WAAW,CAACE,QAAQ,CAAC1H,IAAI,GAAG,CAAC,GAAGL,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,GAC3F9D,SAAS,CAACoB,MAAM,CAAC6C,YAAY,GAC7B,IAAI,GACN,CAAC;MACP4H,IAAI,EAAE,CAAC;MACPpI,KAAK,EAAE9B,gBAAgB,CAACqE,IAAI,CAACvC;IACjC,CAAC;IACD,IAAIuC,IAAI,CAAC4F,QAAQ,IAAI,CAAC,EAAE;MACpB5F,IAAI,CAAC4F,QAAQ,GAAG,CAAC,CAAC;IACtB;IACA,IAAI5F,IAAI,CAACvC,KAAK,IAAI,CAAC,EAAE;MACjBuC,IAAI,CAACvC,KAAK,GAAG,CAAC,CAAC;IACnB;IACA,OAAOuC,IAAI;EACf;AACJ;AACAjI,gBAAgB,GAAG,IAAI+N,OAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}