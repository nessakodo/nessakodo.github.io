{"ast":null,"code":"import { clamp, getDistance, getDistances, getRangeMax, getRangeValue, isInArray, isSsr } from \"../../Utils\";\nfunction applyDistance(particle) {\n  const initialPosition = particle.initialPosition;\n  const {\n    dx,\n    dy\n  } = getDistances(initialPosition, particle.position);\n  const dxFixed = Math.abs(dx),\n    dyFixed = Math.abs(dy);\n  const hDistance = particle.retina.maxDistance.horizontal;\n  const vDistance = particle.retina.maxDistance.vertical;\n  if (!hDistance && !vDistance) {\n    return;\n  }\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    const pos = particle.position,\n      vel = particle.velocity;\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\nexport class ParticlesMover {\n  constructor(container) {\n    this.container = container;\n  }\n  move(particle, delta) {\n    if (particle.destroyed) {\n      return;\n    }\n    this.moveParticle(particle, delta);\n    this.moveParallax(particle);\n  }\n  moveParticle(particle, delta) {\n    var _a, _b, _c;\n    var _d, _e;\n    const particleOptions = particle.options;\n    const moveOptions = particleOptions.move;\n    if (!moveOptions.enable) {\n      return;\n    }\n    const container = this.container,\n      slowFactor = this.getProximitySpeedFactor(particle),\n      baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n      moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n      maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n      sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n      diffFactor = 2,\n      speedFactor = sizeFactor * slowFactor * (delta.factor || 1) / diffFactor,\n      moveSpeed = baseSpeed * speedFactor;\n    this.applyPath(particle, delta);\n    const gravityOptions = particle.gravity;\n    const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n    if (gravityOptions.enable && moveSpeed) {\n      particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n    }\n    if (moveDrift && moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    if (decay != 1) {\n      particle.velocity.multTo(decay);\n    }\n    const velocity = particle.velocity.mult(moveSpeed);\n    const maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n    if (gravityOptions.enable && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n      velocity.y = gravityFactor * maxSpeed;\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n    const zIndexOptions = particle.options.zIndex,\n      zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    if (moveOptions.spin.enable) {\n      this.spin(particle, moveSpeed);\n    } else {\n      if (zVelocityFactor != 1) {\n        velocity.multTo(zVelocityFactor);\n      }\n      particle.position.addTo(velocity);\n      if (moveOptions.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n    applyDistance(particle);\n  }\n  spin(particle, moveSpeed) {\n    const container = this.container;\n    if (!particle.spin) {\n      return;\n    }\n    const updateFunc = {\n      x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n      y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n      particle.spin.radius = maxCanvasSize / 2;\n      particle.spin.acceleration *= -1;\n    } else if (particle.spin.radius < 0) {\n      particle.spin.radius = 0;\n      particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n  }\n  applyPath(particle, delta) {\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n      return;\n    }\n    const container = this.container;\n    if (particle.lastPathTime <= particle.pathDelay) {\n      particle.lastPathTime += delta.value;\n      return;\n    }\n    const path = container.pathGenerator.generate(particle);\n    particle.velocity.addTo(path);\n    if (pathOptions.clamp) {\n      particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n      particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n  }\n  moveParallax(particle) {\n    const container = this.container;\n    const options = container.actualOptions;\n    if (isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n    if (!mousePos) {\n      return;\n    }\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const factor = particle.getRadius() / parallaxForce;\n    const tmp = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n  getProximitySpeedFactor(particle) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n    if (!active) {\n      return 1;\n    }\n    const mousePos = this.container.interactivity.mouse.position;\n    if (!mousePos) {\n      return 1;\n    }\n    const particlePos = particle.getPosition();\n    const dist = getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n    if (dist > radius) {\n      return 1;\n    }\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n}","map":{"version":3,"names":["clamp","getDistance","getDistances","getRangeMax","getRangeValue","isInArray","isSsr","applyDistance","particle","initialPosition","dx","dy","position","dxFixed","Math","abs","dyFixed","hDistance","retina","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","ParticlesMover","constructor","container","move","delta","destroyed","moveParticle","moveParallax","_a","_b","_c","_d","_e","particleOptions","options","moveOptions","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","speed","pixelRatio","reduceFactor","moveDrift","drift","maxSize","size","value","sizeFactor","getRadius","diffFactor","speedFactor","factor","applyPath","gravityOptions","gravity","gravityFactor","inverse","acceleration","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","spin","addTo","vibrate","sin","cos","updateFunc","direction","center","radius","angle","maxCanvasSize","max","canvas","width","height","particlesOptions","pathOptions","path","pathEnabled","lastPathTime","pathDelay","pathGenerator","generate","actualOptions","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","parallaxSmooth","smooth","tmp","offset","active","mode","particlePos","getPosition","dist","slowModeRadius","proximityFactor","modes","slow"],"sources":["/Users/nessakodo/coding/kodo/nessakodo.github.io/node_modules/tsparticles/esm/Core/Utils/ParticlesMover.js"],"sourcesContent":["import { clamp, getDistance, getDistances, getRangeMax, getRangeValue, isInArray, isSsr } from \"../../Utils\";\nfunction applyDistance(particle) {\n    const initialPosition = particle.initialPosition;\n    const { dx, dy } = getDistances(initialPosition, particle.position);\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\n    const hDistance = particle.retina.maxDistance.horizontal;\n    const vDistance = particle.retina.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -Math.random();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -Math.random();\n        }\n    }\n}\nexport class ParticlesMover {\n    constructor(container) {\n        this.container = container;\n    }\n    move(particle, delta) {\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(particle, delta);\n        this.moveParallax(particle);\n    }\n    moveParticle(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options;\n        const moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = this.container, slowFactor = this.getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, diffFactor = 2, speedFactor = (sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, moveSpeed = baseSpeed * speedFactor;\n        this.applyPath(particle, delta);\n        const gravityOptions = particle.gravity;\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable && moveSpeed) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveDrift && moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = particle.moveDecay;\n        if (decay != 1) {\n            particle.velocity.multTo(decay);\n        }\n        const velocity = particle.velocity.mult(moveSpeed);\n        const maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            maxSpeed > 0 &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n        if (moveOptions.spin.enable) {\n            this.spin(particle, moveSpeed);\n        }\n        else {\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n    spin(particle, moveSpeed) {\n        const container = this.container;\n        if (!particle.spin) {\n            return;\n        }\n        const updateFunc = {\n            x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n            y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n        };\n        particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n        particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n        particle.spin.radius += particle.spin.acceleration;\n        const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n        if (particle.spin.radius > maxCanvasSize / 2) {\n            particle.spin.radius = maxCanvasSize / 2;\n            particle.spin.acceleration *= -1;\n        }\n        else if (particle.spin.radius < 0) {\n            particle.spin.radius = 0;\n            particle.spin.acceleration *= -1;\n        }\n        particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n    }\n    applyPath(particle, delta) {\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        const path = container.pathGenerator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n            particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = particle.getPosition();\n        const dist = getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}