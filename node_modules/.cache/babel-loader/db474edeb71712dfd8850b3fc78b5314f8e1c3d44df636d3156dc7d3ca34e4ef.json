{"ast":null,"code":"import { colorToRgb, getDistance, getDistances, getRangeValue, getStyleFromRgb, isPointInside } from \"../../Utils\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Vector } from \"../../Core\";\nexport class AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    var _a, _b, _c;\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n    if (options instanceof Absorber) {\n      this.options = options;\n    } else {\n      this.options = new Absorber();\n      this.options.load(options);\n    }\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n    this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n    const limit = this.options.size.limit;\n    this.limit = {\n      radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n      mass: limit.mass\n    };\n    this.color = (_a = colorToRgb(this.options.color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n  }\n  attract(particle) {\n    const container = this.container;\n    const options = this.options;\n    if (options.draggable) {\n      const mouse = container.interactivity.mouse;\n      if (mouse.clicking && mouse.downPosition) {\n        const mouseDist = getDistance(this.position, mouse.downPosition);\n        if (mouseDist <= this.size) {\n          this.dragging = true;\n        }\n      } else {\n        this.dragging = false;\n      }\n      if (this.dragging && mouse.position) {\n        this.position.x = mouse.position.x;\n        this.position.y = mouse.position.y;\n      }\n    }\n    const pos = particle.getPosition();\n    const {\n      dx,\n      dy,\n      distance\n    } = getDistances(this.position, pos);\n    const v = Vector.create(dx, dy);\n    v.length = this.mass / Math.pow(distance, 2) * container.retina.reduceFactor;\n    if (distance < this.size + particle.getRadius()) {\n      const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n      if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0) {\n        if (options.destroy) {\n          particle.destroy();\n        } else {\n          particle.needsNewPosition = true;\n          this.updateParticlePosition(particle, v);\n        }\n      } else {\n        if (options.destroy) {\n          particle.size.value -= sizeFactor;\n        }\n        this.updateParticlePosition(particle, v);\n      }\n      if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n        this.size += sizeFactor;\n      }\n      if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n        this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n      }\n    } else {\n      this.updateParticlePosition(particle, v);\n    }\n  }\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n    context.fill();\n  }\n  calcPosition() {\n    var _a, _b;\n    const container = this.container;\n    const percentPosition = this.options.position;\n    return Vector.create(getRangeValue((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width, getRangeValue((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height);\n  }\n  updateParticlePosition(particle, v) {\n    var _a;\n    if (particle.destroyed) {\n      return;\n    }\n    const container = this.container;\n    const canvasSize = container.canvas.size;\n    if (particle.needsNewPosition) {\n      particle.position.x = Math.floor(Math.random() * canvasSize.width);\n      particle.position.y = Math.floor(Math.random() * canvasSize.height);\n      particle.velocity.setTo(particle.initialVelocity);\n      particle.absorberOrbit = undefined;\n      particle.needsNewPosition = false;\n    }\n    if (this.options.orbits) {\n      if (particle.absorberOrbit === undefined) {\n        particle.absorberOrbit = Vector.create(0, 0);\n        particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n        particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n      }\n      if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n        const minSize = Math.min(canvasSize.width, canvasSize.height);\n        particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n      }\n      if (particle.absorberOrbitDirection === undefined) {\n        particle.absorberOrbitDirection = particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n      }\n      const orbitRadius = particle.absorberOrbit.length;\n      const orbitAngle = particle.absorberOrbit.angle;\n      const orbitDirection = particle.absorberOrbitDirection;\n      particle.velocity.x = 0;\n      particle.velocity.y = 0;\n      const updateFunc = {\n        x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n        y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos\n      };\n      particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n      particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n      particle.absorberOrbit.length -= v.length;\n      particle.absorberOrbit.angle += ((_a = particle.retina.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio / 100 * container.retina.reduceFactor;\n    } else {\n      const addV = Vector.origin;\n      addV.length = v.length;\n      addV.angle = v.angle;\n      particle.velocity.addTo(addV);\n    }\n  }\n}","map":{"version":3,"names":["colorToRgb","getDistance","getDistances","getRangeValue","getStyleFromRgb","isPointInside","Absorber","Vector","AbsorberInstance","constructor","absorbers","container","options","position","_a","_b","_c","initialPosition","create","x","y","undefined","load","dragging","name","opacity","size","value","retina","pixelRatio","mass","density","reduceFactor","limit","radius","color","b","g","r","copy","calcPosition","attract","particle","draggable","mouse","interactivity","clicking","downPosition","mouseDist","pos","getPosition","dx","dy","distance","v","length","Math","pow","getRadius","sizeFactor","absorberOrbit","destroy","needsNewPosition","updateParticlePosition","resize","canvas","draw","context","translate","beginPath","arc","PI","closePath","fillStyle","fill","percentPosition","random","width","height","destroyed","canvasSize","floor","velocity","setTo","initialVelocity","orbits","angle","minSize","min","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","moveSpeed","addV","origin","addTo"],"sources":["/Users/nessakodo/coding/kodo/nessakodo.github.io/node_modules/tsparticles/esm/Plugins/Absorbers/AbsorberInstance.js"],"sourcesContent":["import { colorToRgb, getDistance, getDistances, getRangeValue, getStyleFromRgb, isPointInside } from \"../../Utils\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Vector } from \"../../Core\";\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b, _c;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = (_a = colorToRgb(this.options.color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n    }\n    attract(particle) {\n        const container = this.container;\n        const options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition();\n        const { dx, dy, distance } = getDistances(this.position, pos);\n        const v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this.updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this.updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this.updateParticlePosition(particle, v);\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        var _a, _b;\n        const container = this.container;\n        const percentPosition = this.options.position;\n        return Vector.create((getRangeValue((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100) * container.canvas.size.width, (getRangeValue((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100) * container.canvas.size.height);\n    }\n    updateParticlePosition(particle, v) {\n        var _a;\n        if (particle.destroyed) {\n            return;\n        }\n        const container = this.container;\n        const canvasSize = container.canvas.size;\n        if (particle.needsNewPosition) {\n            particle.position.x = Math.floor(Math.random() * canvasSize.width);\n            particle.position.y = Math.floor(Math.random() * canvasSize.height);\n            particle.velocity.setTo(particle.initialVelocity);\n            particle.absorberOrbit = undefined;\n            particle.needsNewPosition = false;\n        }\n        if (this.options.orbits) {\n            if (particle.absorberOrbit === undefined) {\n                particle.absorberOrbit = Vector.create(0, 0);\n                particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n            }\n            if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                const minSize = Math.min(canvasSize.width, canvasSize.height);\n                particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n            }\n            if (particle.absorberOrbitDirection === undefined) {\n                particle.absorberOrbitDirection =\n                    particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n            }\n            const orbitRadius = particle.absorberOrbit.length;\n            const orbitAngle = particle.absorberOrbit.angle;\n            const orbitDirection = particle.absorberOrbitDirection;\n            particle.velocity.x = 0;\n            particle.velocity.y = 0;\n            const updateFunc = {\n                x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n            };\n            particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n            particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n            particle.absorberOrbit.length -= v.length;\n            particle.absorberOrbit.angle +=\n                ((((_a = particle.retina.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio) / 100) *\n                    container.retina.reduceFactor;\n        }\n        else {\n            const addV = Vector.origin;\n            addV.length = v.length;\n            addV.angle = v.angle;\n            particle.velocity.addTo(addV);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}