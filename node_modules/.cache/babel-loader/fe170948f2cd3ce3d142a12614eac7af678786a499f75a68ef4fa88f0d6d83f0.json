{"ast":null,"code":"import { colorToHsl, getRangeValue } from \"../../Utils\";\nfunction updateRoll(particle, delta) {\n  const roll = particle.options.roll;\n  if (!particle.roll || !roll.enable) {\n    return;\n  }\n  const speed = particle.roll.speed * delta.factor;\n  const max = 2 * Math.PI;\n  particle.roll.angle += speed;\n  if (particle.roll.angle > max) {\n    particle.roll.angle -= max;\n  }\n}\nexport class RollUpdater {\n  init(particle) {\n    const rollOpt = particle.options.roll;\n    if (rollOpt.enable) {\n      particle.roll = {\n        angle: Math.random() * Math.PI * 2,\n        speed: getRangeValue(rollOpt.speed) / 360\n      };\n      if (rollOpt.backColor) {\n        particle.backColor = colorToHsl(rollOpt.backColor);\n      } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n          type: alterType,\n          value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n        };\n      } else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n          type: \"darken\",\n          value: getRangeValue(rollOpt.darken.value)\n        };\n      } else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n          type: \"enlighten\",\n          value: getRangeValue(rollOpt.enlighten.value)\n        };\n      }\n    } else {\n      particle.roll = {\n        angle: 0,\n        speed: 0\n      };\n    }\n  }\n  isEnabled(particle) {\n    const roll = particle.options.roll;\n    return !particle.destroyed && !particle.spawning && roll.enable;\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateRoll(particle, delta);\n  }\n}","map":{"version":3,"names":["colorToHsl","getRangeValue","updateRoll","particle","delta","roll","options","enable","speed","factor","max","Math","PI","angle","RollUpdater","init","rollOpt","random","backColor","darken","enlighten","alterType","alter","type","value","isEnabled","destroyed","spawning","update"],"sources":["/Users/nessakodo/coding/kodo/nessakodo.github.io/node_modules/tsparticles/esm/Updaters/Roll/RollUpdater.js"],"sourcesContent":["import { colorToHsl, getRangeValue } from \"../../Utils\";\nfunction updateRoll(particle, delta) {\n    const roll = particle.options.roll;\n    if (!particle.roll || !roll.enable) {\n        return;\n    }\n    const speed = particle.roll.speed * delta.factor;\n    const max = 2 * Math.PI;\n    particle.roll.angle += speed;\n    if (particle.roll.angle > max) {\n        particle.roll.angle -= max;\n    }\n}\nexport class RollUpdater {\n    init(particle) {\n        const rollOpt = particle.options.roll;\n        if (rollOpt.enable) {\n            particle.roll = {\n                angle: Math.random() * Math.PI * 2,\n                speed: getRangeValue(rollOpt.speed) / 360,\n            };\n            if (rollOpt.backColor) {\n                particle.backColor = colorToHsl(rollOpt.backColor);\n            }\n            else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                const alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n                particle.roll.alter = {\n                    type: alterType,\n                    value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n                };\n            }\n            else if (rollOpt.darken.enable) {\n                particle.roll.alter = {\n                    type: \"darken\",\n                    value: getRangeValue(rollOpt.darken.value),\n                };\n            }\n            else if (rollOpt.enlighten.enable) {\n                particle.roll.alter = {\n                    type: \"enlighten\",\n                    value: getRangeValue(rollOpt.enlighten.value),\n                };\n            }\n        }\n        else {\n            particle.roll = { angle: 0, speed: 0 };\n        }\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && roll.enable;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}