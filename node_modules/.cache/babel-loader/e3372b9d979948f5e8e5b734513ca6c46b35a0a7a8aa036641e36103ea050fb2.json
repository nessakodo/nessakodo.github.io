{"ast":null,"code":"import { Absorber } from \"./Options/Classes/Absorber\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nimport { itemFromArray } from \"../../Utils\";\nexport class Absorbers {\n  constructor(container) {\n    this.container = container;\n    this.array = [];\n    this.absorbers = [];\n    this.interactivityAbsorbers = [];\n    const overridableContainer = container;\n    overridableContainer.getAbsorber = idxOrName => idxOrName === undefined || typeof idxOrName === \"number\" ? this.array[idxOrName || 0] : this.array.find(t => t.name === idxOrName);\n    overridableContainer.addAbsorber = (options, position) => this.addAbsorber(options, position);\n  }\n  init(options) {\n    var _a, _b;\n    if (!options) {\n      return;\n    }\n    if (options.absorbers) {\n      if (options.absorbers instanceof Array) {\n        this.absorbers = options.absorbers.map(s => {\n          const tmp = new Absorber();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.absorbers instanceof Array) {\n          this.absorbers = new Absorber();\n        }\n        this.absorbers.load(options.absorbers);\n      }\n    }\n    const interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\n    if (interactivityAbsorbers) {\n      if (interactivityAbsorbers instanceof Array) {\n        this.interactivityAbsorbers = interactivityAbsorbers.map(s => {\n          const tmp = new Absorber();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.interactivityAbsorbers instanceof Array) {\n          this.interactivityAbsorbers = new Absorber();\n        }\n        this.interactivityAbsorbers.load(interactivityAbsorbers);\n      }\n    }\n    if (this.absorbers instanceof Array) {\n      for (const absorberOptions of this.absorbers) {\n        this.addAbsorber(absorberOptions);\n      }\n    } else {\n      this.addAbsorber(this.absorbers);\n    }\n  }\n  particleUpdate(particle) {\n    for (const absorber of this.array) {\n      absorber.attract(particle);\n      if (particle.destroyed) {\n        break;\n      }\n    }\n  }\n  draw(context) {\n    for (const absorber of this.array) {\n      context.save();\n      absorber.draw(context);\n      context.restore();\n    }\n  }\n  stop() {\n    this.array = [];\n  }\n  resize() {\n    for (const absorber of this.array) {\n      absorber.resize();\n    }\n  }\n  handleClickMode(mode) {\n    const container = this.container;\n    const absorberOptions = this.absorbers;\n    const modeAbsorbers = this.interactivityAbsorbers;\n    if (mode === \"absorber\") {\n      let absorbersModeOptions;\n      if (modeAbsorbers instanceof Array) {\n        if (modeAbsorbers.length > 0) {\n          absorbersModeOptions = itemFromArray(modeAbsorbers);\n        }\n      } else {\n        absorbersModeOptions = modeAbsorbers;\n      }\n      const absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : absorberOptions instanceof Array ? itemFromArray(absorberOptions) : absorberOptions;\n      const aPosition = container.interactivity.mouse.clickPosition;\n      this.addAbsorber(absorbersOptions, aPosition);\n    }\n  }\n  addAbsorber(options, position) {\n    const absorber = new AbsorberInstance(this, this.container, options, position);\n    this.array.push(absorber);\n    return absorber;\n  }\n  removeAbsorber(absorber) {\n    const index = this.array.indexOf(absorber);\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n}","map":{"version":3,"names":["Absorber","AbsorberInstance","itemFromArray","Absorbers","constructor","container","array","absorbers","interactivityAbsorbers","overridableContainer","getAbsorber","idxOrName","undefined","find","t","name","addAbsorber","options","position","init","_a","_b","Array","map","s","tmp","load","interactivity","modes","absorberOptions","particleUpdate","particle","absorber","attract","destroyed","draw","context","save","restore","stop","resize","handleClickMode","mode","modeAbsorbers","absorbersModeOptions","length","absorbersOptions","aPosition","mouse","clickPosition","push","removeAbsorber","index","indexOf","splice"],"sources":["/Users/nessakodo/coding/kodo/nessakodo.github.io/node_modules/tsparticles/esm/Plugins/Absorbers/Absorbers.js"],"sourcesContent":["import { Absorber } from \"./Options/Classes/Absorber\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nimport { itemFromArray } from \"../../Utils\";\nexport class Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        const overridableContainer = container;\n        overridableContainer.getAbsorber = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        overridableContainer.addAbsorber = (options, position) => this.addAbsorber(options, position);\n    }\n    init(options) {\n        var _a, _b;\n        if (!options) {\n            return;\n        }\n        if (options.absorbers) {\n            if (options.absorbers instanceof Array) {\n                this.absorbers = options.absorbers.map((s) => {\n                    const tmp = new Absorber();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                if (this.absorbers instanceof Array) {\n                    this.absorbers = new Absorber();\n                }\n                this.absorbers.load(options.absorbers);\n            }\n        }\n        const interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\n        if (interactivityAbsorbers) {\n            if (interactivityAbsorbers instanceof Array) {\n                this.interactivityAbsorbers = interactivityAbsorbers.map((s) => {\n                    const tmp = new Absorber();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                if (this.interactivityAbsorbers instanceof Array) {\n                    this.interactivityAbsorbers = new Absorber();\n                }\n                this.interactivityAbsorbers.load(interactivityAbsorbers);\n            }\n        }\n        if (this.absorbers instanceof Array) {\n            for (const absorberOptions of this.absorbers) {\n                this.addAbsorber(absorberOptions);\n            }\n        }\n        else {\n            this.addAbsorber(this.absorbers);\n        }\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            context.save();\n            absorber.draw(context);\n            context.restore();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    handleClickMode(mode) {\n        const container = this.container;\n        const absorberOptions = this.absorbers;\n        const modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === \"absorber\") {\n            let absorbersModeOptions;\n            if (modeAbsorbers instanceof Array) {\n                if (modeAbsorbers.length > 0) {\n                    absorbersModeOptions = itemFromArray(modeAbsorbers);\n                }\n            }\n            else {\n                absorbersModeOptions = modeAbsorbers;\n            }\n            const absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : (absorberOptions instanceof Array ? itemFromArray(absorberOptions) : absorberOptions);\n            const aPosition = container.interactivity.mouse.clickPosition;\n            this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    addAbsorber(options, position) {\n        const absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}