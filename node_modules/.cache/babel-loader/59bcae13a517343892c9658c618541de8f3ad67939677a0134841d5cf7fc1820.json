{"ast":null,"code":"import { Constants, ExternalInteractorBase } from \"../../../Core\";\nimport { getDistance, getLinkColor, getLinkRandomColor, isInArray } from \"../../../Utils\";\nexport class Grabber extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  isEnabled() {\n    const container = this.container,\n      mouse = container.interactivity.mouse,\n      events = container.actualOptions.interactivity.events;\n    return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n  }\n  reset() {}\n  async interact() {\n    var _a;\n    const container = this.container,\n      options = container.actualOptions,\n      interactivity = options.interactivity;\n    if (interactivity.events.onHover.enable && container.interactivity.status === Constants.mouseMoveEvent) {\n      const mousePos = container.interactivity.mouse.position;\n      if (!mousePos) {\n        return;\n      }\n      const distance = container.retina.grabModeDistance,\n        query = container.particles.quadTree.queryCircle(mousePos, distance);\n      for (const particle of query) {\n        const pos = particle.getPosition(),\n          pointDistance = getDistance(pos, mousePos);\n        if (pointDistance <= distance) {\n          const grabLineOptions = interactivity.modes.grab.links,\n            lineOpacity = grabLineOptions.opacity,\n            opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n          if (opacityLine <= 0) {\n            continue;\n          }\n          const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n          if (!container.particles.grabLineColor) {\n            const linksOptions = options.interactivity.modes.grab.links;\n            container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n          }\n          const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n          if (!colorLine) {\n            return;\n          }\n          container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["Constants","ExternalInteractorBase","getDistance","getLinkColor","getLinkRandomColor","isInArray","Grabber","constructor","container","isEnabled","mouse","interactivity","events","actualOptions","onHover","enable","position","mode","reset","interact","_a","options","status","mouseMoveEvent","mousePos","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","grabLineOptions","modes","grab","links","lineOpacity","opacity","opacityLine","optColor","color","grabLineColor","linksOptions","blink","consent","colorLine","undefined","canvas","drawGrabLine"],"sources":["/Users/nessakodo/coding/kodo/nessakodo.github.io/node_modules/tsparticles/esm/Interactions/External/Grab/Grabber.js"],"sourcesContent":["import { Constants, ExternalInteractorBase } from \"../../../Core\";\nimport { getDistance, getLinkColor, getLinkRandomColor, isInArray } from \"../../../Utils\";\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    reset() {\n    }\n    async interact() {\n        var _a;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n            for (const particle of query) {\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n                if (pointDistance <= distance) {\n                    const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n                    if (opacityLine <= 0) {\n                        continue;\n                    }\n                    const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n                    if (!container.particles.grabLineColor) {\n                        const linksOptions = options.interactivity.modes.grab.links;\n                        container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                    }\n                    const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n                    if (!colorLine) {\n                        return;\n                    }\n                    container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                }\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}