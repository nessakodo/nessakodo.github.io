{"ast":null,"code":"import { PolygonMaskDraw } from \"./PolygonMaskDraw\";\nimport { PolygonMaskInline } from \"./PolygonMaskInline\";\nimport { PolygonMaskLocalSvg } from \"./PolygonMaskLocalSvg\";\nimport { PolygonMaskMove } from \"./PolygonMaskMove\";\nimport { deepExtend } from \"../../../../Utils\";\nexport class PolygonMask {\n  constructor() {\n    this.draw = new PolygonMaskDraw();\n    this.enable = false;\n    this.inline = new PolygonMaskInline();\n    this.move = new PolygonMaskMove();\n    this.scale = 1;\n    this.type = \"none\";\n  }\n  get inlineArrangement() {\n    return this.inline.arrangement;\n  }\n  set inlineArrangement(value) {\n    this.inline.arrangement = value;\n  }\n  load(data) {\n    var _a;\n    if (!data) {\n      return;\n    }\n    this.draw.load(data.draw);\n    const inline = (_a = data.inline) !== null && _a !== void 0 ? _a : {\n      arrangement: data.inlineArrangement\n    };\n    if (inline !== undefined) {\n      this.inline.load(inline);\n    }\n    this.move.load(data.move);\n    if (data.scale !== undefined) {\n      this.scale = data.scale;\n    }\n    if (data.type !== undefined) {\n      this.type = data.type;\n    }\n    if (data.enable !== undefined) {\n      this.enable = data.enable;\n    } else {\n      this.enable = this.type !== \"none\";\n    }\n    if (data.url !== undefined) {\n      this.url = data.url;\n    }\n    if (data.data !== undefined) {\n      if (typeof data.data === \"string\") {\n        this.data = data.data;\n      } else {\n        this.data = new PolygonMaskLocalSvg();\n        this.data.load(data.data);\n      }\n    }\n    if (data.position !== undefined) {\n      this.position = deepExtend({}, data.position);\n    }\n  }\n}","map":{"version":3,"names":["PolygonMaskDraw","PolygonMaskInline","PolygonMaskLocalSvg","PolygonMaskMove","deepExtend","PolygonMask","constructor","draw","enable","inline","move","scale","type","inlineArrangement","arrangement","value","load","data","_a","undefined","url","position"],"sources":["/Users/nessakodo/coding/kodo/nessakodo.github.io/node_modules/tsparticles/esm/Plugins/PolygonMask/Options/Classes/PolygonMask.js"],"sourcesContent":["import { PolygonMaskDraw } from \"./PolygonMaskDraw\";\nimport { PolygonMaskInline } from \"./PolygonMaskInline\";\nimport { PolygonMaskLocalSvg } from \"./PolygonMaskLocalSvg\";\nimport { PolygonMaskMove } from \"./PolygonMaskMove\";\nimport { deepExtend } from \"../../../../Utils\";\nexport class PolygonMask {\n    constructor() {\n        this.draw = new PolygonMaskDraw();\n        this.enable = false;\n        this.inline = new PolygonMaskInline();\n        this.move = new PolygonMaskMove();\n        this.scale = 1;\n        this.type = \"none\";\n    }\n    get inlineArrangement() {\n        return this.inline.arrangement;\n    }\n    set inlineArrangement(value) {\n        this.inline.arrangement = value;\n    }\n    load(data) {\n        var _a;\n        if (!data) {\n            return;\n        }\n        this.draw.load(data.draw);\n        const inline = (_a = data.inline) !== null && _a !== void 0 ? _a : {\n            arrangement: data.inlineArrangement,\n        };\n        if (inline !== undefined) {\n            this.inline.load(inline);\n        }\n        this.move.load(data.move);\n        if (data.scale !== undefined) {\n            this.scale = data.scale;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        else {\n            this.enable = this.type !== \"none\";\n        }\n        if (data.url !== undefined) {\n            this.url = data.url;\n        }\n        if (data.data !== undefined) {\n            if (typeof data.data === \"string\") {\n                this.data = data.data;\n            }\n            else {\n                this.data = new PolygonMaskLocalSvg();\n                this.data.load(data.data);\n            }\n        }\n        if (data.position !== undefined) {\n            this.position = deepExtend({}, data.position);\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,mBAAmB;AACnD,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,OAAO,MAAMC,WAAW,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,IAAI,GAAG,IAAIP,eAAe,CAAC,CAAC;IACjC,IAAI,CAACQ,MAAM,GAAG,KAAK;IACnB,IAAI,CAACC,MAAM,GAAG,IAAIR,iBAAiB,CAAC,CAAC;IACrC,IAAI,CAACS,IAAI,GAAG,IAAIP,eAAe,CAAC,CAAC;IACjC,IAAI,CAACQ,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,IAAI,GAAG,MAAM;EACtB;EACA,IAAIC,iBAAiBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACJ,MAAM,CAACK,WAAW;EAClC;EACA,IAAID,iBAAiBA,CAACE,KAAK,EAAE;IACzB,IAAI,CAACN,MAAM,CAACK,WAAW,GAAGC,KAAK;EACnC;EACAC,IAAIA,CAACC,IAAI,EAAE;IACP,IAAIC,EAAE;IACN,IAAI,CAACD,IAAI,EAAE;MACP;IACJ;IACA,IAAI,CAACV,IAAI,CAACS,IAAI,CAACC,IAAI,CAACV,IAAI,CAAC;IACzB,MAAME,MAAM,GAAG,CAACS,EAAE,GAAGD,IAAI,CAACR,MAAM,MAAM,IAAI,IAAIS,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;MAC/DJ,WAAW,EAAEG,IAAI,CAACJ;IACtB,CAAC;IACD,IAAIJ,MAAM,KAAKU,SAAS,EAAE;MACtB,IAAI,CAACV,MAAM,CAACO,IAAI,CAACP,MAAM,CAAC;IAC5B;IACA,IAAI,CAACC,IAAI,CAACM,IAAI,CAACC,IAAI,CAACP,IAAI,CAAC;IACzB,IAAIO,IAAI,CAACN,KAAK,KAAKQ,SAAS,EAAE;MAC1B,IAAI,CAACR,KAAK,GAAGM,IAAI,CAACN,KAAK;IAC3B;IACA,IAAIM,IAAI,CAACL,IAAI,KAAKO,SAAS,EAAE;MACzB,IAAI,CAACP,IAAI,GAAGK,IAAI,CAACL,IAAI;IACzB;IACA,IAAIK,IAAI,CAACT,MAAM,KAAKW,SAAS,EAAE;MAC3B,IAAI,CAACX,MAAM,GAAGS,IAAI,CAACT,MAAM;IAC7B,CAAC,MACI;MACD,IAAI,CAACA,MAAM,GAAG,IAAI,CAACI,IAAI,KAAK,MAAM;IACtC;IACA,IAAIK,IAAI,CAACG,GAAG,KAAKD,SAAS,EAAE;MACxB,IAAI,CAACC,GAAG,GAAGH,IAAI,CAACG,GAAG;IACvB;IACA,IAAIH,IAAI,CAACA,IAAI,KAAKE,SAAS,EAAE;MACzB,IAAI,OAAOF,IAAI,CAACA,IAAI,KAAK,QAAQ,EAAE;QAC/B,IAAI,CAACA,IAAI,GAAGA,IAAI,CAACA,IAAI;MACzB,CAAC,MACI;QACD,IAAI,CAACA,IAAI,GAAG,IAAIf,mBAAmB,CAAC,CAAC;QACrC,IAAI,CAACe,IAAI,CAACD,IAAI,CAACC,IAAI,CAACA,IAAI,CAAC;MAC7B;IACJ;IACA,IAAIA,IAAI,CAACI,QAAQ,KAAKF,SAAS,EAAE;MAC7B,IAAI,CAACE,QAAQ,GAAGjB,UAAU,CAAC,CAAC,CAAC,EAAEa,IAAI,CAACI,QAAQ,CAAC;IACjD;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}