{"ast":null,"code":"import { getRangeValue, randomInRange, setRangeValue } from \"../../Utils\";\nexport class LifeUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  init() {}\n  isEnabled(particle) {\n    return !particle.destroyed;\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    const life = particle.life;\n    let justSpawned = false;\n    if (particle.spawning) {\n      life.delayTime += delta.value;\n      if (life.delayTime >= particle.life.delay) {\n        justSpawned = true;\n        particle.spawning = false;\n        life.delayTime = 0;\n        life.time = 0;\n      } else {\n        return;\n      }\n    }\n    if (life.duration === -1) {\n      return;\n    }\n    if (particle.spawning) {\n      return;\n    }\n    if (justSpawned) {\n      life.time = 0;\n    } else {\n      life.time += delta.value;\n    }\n    if (life.time < life.duration) {\n      return;\n    }\n    life.time = 0;\n    if (particle.life.count > 0) {\n      particle.life.count--;\n    }\n    if (particle.life.count === 0) {\n      particle.destroy();\n      return;\n    }\n    const canvasSize = this.container.canvas.size,\n      widthRange = setRangeValue(0, canvasSize.width),\n      heightRange = setRangeValue(0, canvasSize.width);\n    particle.position.x = randomInRange(widthRange);\n    particle.position.y = randomInRange(heightRange);\n    particle.spawning = true;\n    life.delayTime = 0;\n    life.time = 0;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n    life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n  }\n}","map":{"version":3,"names":["getRangeValue","randomInRange","setRangeValue","LifeUpdater","constructor","container","init","isEnabled","particle","destroyed","update","delta","life","justSpawned","spawning","delayTime","value","delay","time","duration","count","destroy","canvasSize","canvas","size","widthRange","width","heightRange","position","x","y","reset","lifeOptions","options"],"sources":["/Users/nessakodo/coding/kodo/nessakodo.github.io/node_modules/tsparticles/esm/Updaters/Life/LifeUpdater.js"],"sourcesContent":["import { getRangeValue, randomInRange, setRangeValue } from \"../../Utils\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n        life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,aAAa,EAAEC,aAAa,QAAQ,aAAa;AACzE,OAAO,MAAMC,WAAW,CAAC;EACrBC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EACAC,IAAIA,CAAA,EAAG,CACP;EACAC,SAASA,CAACC,QAAQ,EAAE;IAChB,OAAO,CAACA,QAAQ,CAACC,SAAS;EAC9B;EACAC,MAAMA,CAACF,QAAQ,EAAEG,KAAK,EAAE;IACpB,IAAI,CAAC,IAAI,CAACJ,SAAS,CAACC,QAAQ,CAAC,EAAE;MAC3B;IACJ;IACA,MAAMI,IAAI,GAAGJ,QAAQ,CAACI,IAAI;IAC1B,IAAIC,WAAW,GAAG,KAAK;IACvB,IAAIL,QAAQ,CAACM,QAAQ,EAAE;MACnBF,IAAI,CAACG,SAAS,IAAIJ,KAAK,CAACK,KAAK;MAC7B,IAAIJ,IAAI,CAACG,SAAS,IAAIP,QAAQ,CAACI,IAAI,CAACK,KAAK,EAAE;QACvCJ,WAAW,GAAG,IAAI;QAClBL,QAAQ,CAACM,QAAQ,GAAG,KAAK;QACzBF,IAAI,CAACG,SAAS,GAAG,CAAC;QAClBH,IAAI,CAACM,IAAI,GAAG,CAAC;MACjB,CAAC,MACI;QACD;MACJ;IACJ;IACA,IAAIN,IAAI,CAACO,QAAQ,KAAK,CAAC,CAAC,EAAE;MACtB;IACJ;IACA,IAAIX,QAAQ,CAACM,QAAQ,EAAE;MACnB;IACJ;IACA,IAAID,WAAW,EAAE;MACbD,IAAI,CAACM,IAAI,GAAG,CAAC;IACjB,CAAC,MACI;MACDN,IAAI,CAACM,IAAI,IAAIP,KAAK,CAACK,KAAK;IAC5B;IACA,IAAIJ,IAAI,CAACM,IAAI,GAAGN,IAAI,CAACO,QAAQ,EAAE;MAC3B;IACJ;IACAP,IAAI,CAACM,IAAI,GAAG,CAAC;IACb,IAAIV,QAAQ,CAACI,IAAI,CAACQ,KAAK,GAAG,CAAC,EAAE;MACzBZ,QAAQ,CAACI,IAAI,CAACQ,KAAK,EAAE;IACzB;IACA,IAAIZ,QAAQ,CAACI,IAAI,CAACQ,KAAK,KAAK,CAAC,EAAE;MAC3BZ,QAAQ,CAACa,OAAO,CAAC,CAAC;MAClB;IACJ;IACA,MAAMC,UAAU,GAAG,IAAI,CAACjB,SAAS,CAACkB,MAAM,CAACC,IAAI;MAAEC,UAAU,GAAGvB,aAAa,CAAC,CAAC,EAAEoB,UAAU,CAACI,KAAK,CAAC;MAAEC,WAAW,GAAGzB,aAAa,CAAC,CAAC,EAAEoB,UAAU,CAACI,KAAK,CAAC;IAChJlB,QAAQ,CAACoB,QAAQ,CAACC,CAAC,GAAG5B,aAAa,CAACwB,UAAU,CAAC;IAC/CjB,QAAQ,CAACoB,QAAQ,CAACE,CAAC,GAAG7B,aAAa,CAAC0B,WAAW,CAAC;IAChDnB,QAAQ,CAACM,QAAQ,GAAG,IAAI;IACxBF,IAAI,CAACG,SAAS,GAAG,CAAC;IAClBH,IAAI,CAACM,IAAI,GAAG,CAAC;IACbV,QAAQ,CAACuB,KAAK,CAAC,CAAC;IAChB,MAAMC,WAAW,GAAGxB,QAAQ,CAACyB,OAAO,CAACrB,IAAI;IACzCA,IAAI,CAACK,KAAK,GAAGjB,aAAa,CAACgC,WAAW,CAACf,KAAK,CAACD,KAAK,CAAC,GAAG,IAAI;IAC1DJ,IAAI,CAACO,QAAQ,GAAGnB,aAAa,CAACgC,WAAW,CAACb,QAAQ,CAACH,KAAK,CAAC,GAAG,IAAI;EACpE;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}