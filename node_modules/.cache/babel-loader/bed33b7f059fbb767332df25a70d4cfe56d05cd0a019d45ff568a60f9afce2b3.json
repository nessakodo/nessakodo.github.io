{"ast":null,"code":"import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, getDistance, getDistances, itemFromArray } from \"../../Utils\";\nimport { Constants } from \"../../Core\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport class PolygonMaskInstance {\n  constructor(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  async initAsync(options) {\n    this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n    const polygonMaskOptions = this.options;\n    this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n    if (polygonMaskOptions.enable) {\n      await this.initRawData();\n    }\n  }\n  resize() {\n    const container = this.container;\n    const options = this.options;\n    if (!(options.enable && options.type !== \"none\")) {\n      return;\n    }\n    if (this.redrawTimeout) {\n      clearTimeout(this.redrawTimeout);\n    }\n    this.redrawTimeout = window.setTimeout(async () => {\n      await this.initRawData(true);\n      await container.particles.redraw();\n    }, 250);\n  }\n  stop() {\n    delete this.raw;\n    delete this.paths;\n  }\n  particlesInitialization() {\n    const options = this.options;\n    if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n      this.drawPoints();\n      return true;\n    }\n    return false;\n  }\n  particlePosition(position) {\n    var _a, _b;\n    const options = this.options;\n    if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n      return;\n    }\n    return deepExtend({}, position ? position : this.randomPoint());\n  }\n  particleBounce(particle, delta, direction) {\n    return this.polygonBounce(particle, delta, direction);\n  }\n  clickPositionValid(position) {\n    const options = this.options;\n    return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n  }\n  draw(context) {\n    var _a;\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n    const options = this.options;\n    const polygonDraw = options.draw;\n    if (!(options.enable && polygonDraw.enable)) {\n      return;\n    }\n    const rawData = this.raw;\n    for (const path of this.paths) {\n      const path2d = path.path2d;\n      const path2dSupported = this.path2DSupported;\n      if (!context) {\n        continue;\n      }\n      if (path2dSupported && path2d && this.offset) {\n        drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n      } else if (rawData) {\n        drawPolygonMask(context, rawData, polygonDraw.stroke);\n      }\n    }\n  }\n  polygonBounce(particle, _delta, direction) {\n    const options = this.options;\n    if (!this.raw || !options.enable || direction !== \"top\") {\n      return false;\n    }\n    if (options.type === \"inside\" || options.type === \"outside\") {\n      let closest, dx, dy;\n      const pos = particle.getPosition(),\n        radius = particle.getRadius();\n      for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        const pi = this.raw[i],\n          pj = this.raw[j];\n        closest = calcClosestPtOnSegment(pi, pj, pos);\n        const dist = getDistances(pos, closest);\n        [dx, dy] = [dist.dx, dist.dy];\n        if (dist.distance < radius) {\n          segmentBounce(pi, pj, particle.velocity);\n          return true;\n        }\n      }\n      if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n        const factor = {\n          x: 1,\n          y: 1\n        };\n        if (particle.position.x >= closest.x) {\n          factor.x = -1;\n        }\n        if (particle.position.y >= closest.y) {\n          factor.y = -1;\n        }\n        particle.position.x = closest.x + radius * 2 * factor.x;\n        particle.position.y = closest.y + radius * 2 * factor.y;\n        particle.velocity.mult(-1);\n        return true;\n      }\n    } else if (options.type === \"inline\" && particle.initialPosition) {\n      const dist = getDistance(particle.initialPosition, particle.getPosition());\n      if (dist > this.polygonMaskMoveRadius) {\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        return true;\n      }\n    }\n    return false;\n  }\n  checkInsidePolygon(position) {\n    var _a, _b;\n    const container = this.container;\n    const options = this.options;\n    if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n      return true;\n    }\n    if (!this.raw) {\n      throw new Error(Constants.noPolygonFound);\n    }\n    const canvasSize = container.canvas.size;\n    const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n    const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n    let inside = false;\n    for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      const pi = this.raw[i];\n      const pj = this.raw[j];\n      const intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n  }\n  parseSvgPath(xml, force) {\n    var _a, _b, _c;\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n    const container = this.container;\n    const options = this.options;\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(xml, \"image/svg+xml\");\n    const svg = doc.getElementsByTagName(\"svg\")[0];\n    let svgPaths = svg.getElementsByTagName(\"path\");\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n    this.paths = [];\n    for (let i = 0; i < svgPaths.length; i++) {\n      const path = svgPaths.item(i);\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n    const pxRatio = container.retina.pixelRatio;\n    const scale = options.scale / pxRatio;\n    this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n    this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n    const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    return parsePaths(this.paths, scale, this.offset);\n  }\n  async downloadSvgPath(svgUrl, force) {\n    const options = this.options;\n    const url = svgUrl || options.url;\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n    if (!url || this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n    const req = await fetch(url);\n    if (!req.ok) {\n      throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n    }\n    return this.parseSvgPath(await req.text(), force);\n  }\n  drawPoints() {\n    if (!this.raw) {\n      return;\n    }\n    for (const item of this.raw) {\n      this.container.particles.addParticle({\n        x: item.x,\n        y: item.y\n      });\n    }\n  }\n  randomPoint() {\n    const container = this.container;\n    const options = this.options;\n    let position;\n    if (options.type === \"inline\") {\n      switch (options.inline.arrangement) {\n        case \"random-point\":\n          position = this.getRandomPoint();\n          break;\n        case \"random-length\":\n          position = this.getRandomPointByLength();\n          break;\n        case \"equidistant\":\n          position = this.getEquidistantPointByIndex(container.particles.count);\n          break;\n        case \"one-per-point\":\n        case \"per-point\":\n        default:\n          position = this.getPointByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPoint();\n    }\n  }\n  getRandomPoint() {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Constants.noPolygonDataLoaded);\n    }\n    const coords = itemFromArray(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n  getRandomPointByLength() {\n    var _a, _b, _c;\n    const options = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error(Constants.noPolygonDataLoaded);\n    }\n    const path = itemFromArray(this.paths);\n    const distance = Math.floor(Math.random() * path.length) + 1;\n    const point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  }\n  getEquidistantPointByIndex(index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const options = this.container.actualOptions;\n    const polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants.noPolygonDataLoaded);\n    let offset = 0;\n    let point;\n    const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n    const distance = totalLength / options.particles.number.value;\n    for (const path of this.paths) {\n      const pathDistance = distance * index - offset;\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  }\n  getPointByIndex(index) {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Constants.noPolygonDataLoaded);\n    }\n    const coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n  createPath2D() {\n    var _a, _b;\n    const options = this.options;\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n    for (const path of this.paths) {\n      const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n      if (pathData) {\n        const path2d = new Path2D(pathData);\n        const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n        const finalPath = new Path2D();\n        const transform = matrix.scale(options.scale);\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n      if (path.path2d || !this.raw) {\n        continue;\n      }\n      path.path2d = new Path2D();\n      path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n      this.raw.forEach((pos, i) => {\n        var _a;\n        if (i > 0) {\n          (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n        }\n      });\n      path.path2d.closePath();\n    }\n  }\n  async initRawData(force) {\n    const options = this.options;\n    if (options.url) {\n      this.raw = await this.downloadSvgPath(options.url, force);\n    } else if (options.data) {\n      const data = options.data;\n      let svg;\n      if (typeof data !== \"string\") {\n        const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n        const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n        svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n      } else {\n        svg = data;\n      }\n      this.raw = this.parseSvgPath(svg, force);\n    }\n    this.createPath2D();\n  }\n}","map":{"version":3,"names":["calcClosestPtOnSegment","drawPolygonMask","drawPolygonMaskPath","parsePaths","segmentBounce","deepExtend","getDistance","getDistances","itemFromArray","Constants","PolygonMask","PolygonMaskInstance","constructor","container","dimension","height","width","path2DSupported","window","Path2D","options","polygonMaskMoveRadius","move","radius","retina","pixelRatio","initAsync","load","polygon","polygonMaskOptions","enable","initRawData","resize","type","redrawTimeout","clearTimeout","setTimeout","particles","redraw","stop","raw","paths","particlesInitialization","inline","arrangement","drawPoints","particlePosition","position","_a","_b","length","randomPoint","particleBounce","particle","delta","direction","polygonBounce","clickPositionValid","checkInsidePolygon","draw","context","polygonDraw","rawData","path","path2d","path2dSupported","offset","stroke","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","dist","distance","velocity","undefined","factor","x","y","mult","initialPosition","Error","noPolygonFound","canvasSize","canvas","size","Math","random","inside","intersect","parseSvgPath","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","downloadSvgPath","svgUrl","url","req","fetch","ok","text","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","value","pathDistance","createPath2D","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","data","Array","map","t","join","namespaces"],"sources":["/Users/nessakodo/coding/kodo/nessakodo.github.io/node_modules/tsparticles/esm/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, getDistance, getDistances, itemFromArray } from \"../../Utils\";\nimport { Constants } from \"../../Core\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport class PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return deepExtend({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options;\n        const url = svgUrl || options.url;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const coords = itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const path = itemFromArray(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}