{"ast":null,"code":"export class CircleShape {\n  randomPosition(position, size, fill) {\n    const generateTheta = (x, y) => {\n      const u = Math.random() / 4.0;\n      const theta = Math.atan(y / x * Math.tan(2 * Math.PI * u));\n      const v = Math.random();\n      if (v < 0.25) {\n        return theta;\n      } else if (v < 0.5) {\n        return Math.PI - theta;\n      } else if (v < 0.75) {\n        return Math.PI + theta;\n      } else {\n        return -theta;\n      }\n    };\n    const radius = (x, y, theta) => x * y / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2);\n    const [a, b] = [size.width / 2, size.height / 2];\n    const randomTheta = generateTheta(a, b),\n      maxRadius = radius(a, b, randomTheta),\n      randomRadius = fill ? maxRadius * Math.sqrt(Math.random()) : maxRadius;\n    return {\n      x: position.x + randomRadius * Math.cos(randomTheta),\n      y: position.y + randomRadius * Math.sin(randomTheta)\n    };\n  }\n}","map":{"version":3,"names":["CircleShape","randomPosition","position","size","fill","generateTheta","x","y","u","Math","random","theta","atan","tan","PI","v","radius","sqrt","cos","sin","a","b","width","height","randomTheta","maxRadius","randomRadius"],"sources":["/Users/nessakodo/coding/kodo/nessakodo.github.io/node_modules/tsparticles/esm/Plugins/Emitters/Shapes/Circle/CircleShape.js"],"sourcesContent":["export class CircleShape {\n    randomPosition(position, size, fill) {\n        const generateTheta = (x, y) => {\n            const u = Math.random() / 4.0;\n            const theta = Math.atan((y / x) * Math.tan(2 * Math.PI * u));\n            const v = Math.random();\n            if (v < 0.25) {\n                return theta;\n            }\n            else if (v < 0.5) {\n                return Math.PI - theta;\n            }\n            else if (v < 0.75) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        };\n        const radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2);\n        const [a, b] = [size.width / 2, size.height / 2];\n        const randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(Math.random()) : maxRadius;\n        return {\n            x: position.x + randomRadius * Math.cos(randomTheta),\n            y: position.y + randomRadius * Math.sin(randomTheta),\n        };\n    }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,CAAC;EACrBC,cAAcA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACjC,MAAMC,aAAa,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC5B,MAAMC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAC7B,MAAMC,KAAK,GAAGF,IAAI,CAACG,IAAI,CAAEL,CAAC,GAAGD,CAAC,GAAIG,IAAI,CAACI,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACK,EAAE,GAAGN,CAAC,CAAC,CAAC;MAC5D,MAAMO,CAAC,GAAGN,IAAI,CAACC,MAAM,CAAC,CAAC;MACvB,IAAIK,CAAC,GAAG,IAAI,EAAE;QACV,OAAOJ,KAAK;MAChB,CAAC,MACI,IAAII,CAAC,GAAG,GAAG,EAAE;QACd,OAAON,IAAI,CAACK,EAAE,GAAGH,KAAK;MAC1B,CAAC,MACI,IAAII,CAAC,GAAG,IAAI,EAAE;QACf,OAAON,IAAI,CAACK,EAAE,GAAGH,KAAK;MAC1B,CAAC,MACI;QACD,OAAO,CAACA,KAAK;MACjB;IACJ,CAAC;IACD,MAAMK,MAAM,GAAGA,CAACV,CAAC,EAAEC,CAAC,EAAEI,KAAK,KAAML,CAAC,GAAGC,CAAC,GAAIE,IAAI,CAACQ,IAAI,CAAC,CAACV,CAAC,GAAGE,IAAI,CAACS,GAAG,CAACP,KAAK,CAAC,KAAK,CAAC,GAAG,CAACL,CAAC,GAAGG,IAAI,CAACU,GAAG,CAACR,KAAK,CAAC,KAAK,CAAC,CAAC;IAC5G,MAAM,CAACS,CAAC,EAAEC,CAAC,CAAC,GAAG,CAAClB,IAAI,CAACmB,KAAK,GAAG,CAAC,EAAEnB,IAAI,CAACoB,MAAM,GAAG,CAAC,CAAC;IAChD,MAAMC,WAAW,GAAGnB,aAAa,CAACe,CAAC,EAAEC,CAAC,CAAC;MAAEI,SAAS,GAAGT,MAAM,CAACI,CAAC,EAAEC,CAAC,EAAEG,WAAW,CAAC;MAAEE,YAAY,GAAGtB,IAAI,GAAGqB,SAAS,GAAGhB,IAAI,CAACQ,IAAI,CAACR,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,GAAGe,SAAS;IACtJ,OAAO;MACHnB,CAAC,EAAEJ,QAAQ,CAACI,CAAC,GAAGoB,YAAY,GAAGjB,IAAI,CAACS,GAAG,CAACM,WAAW,CAAC;MACpDjB,CAAC,EAAEL,QAAQ,CAACK,CAAC,GAAGmB,YAAY,GAAGjB,IAAI,CAACU,GAAG,CAACK,WAAW;IACvD,CAAC;EACL;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}